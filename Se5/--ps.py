# 自动化测试模型

# 基本概念
"""
1．库
库的英文单词是 Library，库是由代码集合成的一个产品，可供程序员调用。面向对象
的代码组织形成的库叫类库，面向过程的代码组织形成的库叫函数库。从这个角度看，
第4 章介绍的 WebDriver 就属于库的范畴，因为它提供了一组操作 Web 页面的类与方法，
所以可以称它为 Web 自动化测试库。

2．框架
框架的英文单词是 Framework，框架是为解决一个或一类问题而开发的产品，用户一
般只需使用框架提供的类或函数，即可实现全部功能。从这个角度看，unittest 框架（第 6
章）主要用于测试用例的组织和执行，以及测试结果的生成。因为它的主要任务就是帮助
我们完成测试工作，所以通常称它为测试框架。

3．工具
工具的英文单词是 Tools，工具与框架所做的事情类似，只是工具提供了更高层次的封
装，屏蔽了底层的代码，提供了单独的操作界面供用户使用。例如，UFT（QTP）、Katalon
就属于自动化测试工具。
"""


# 自动化测试模型
"""
自动化测试模型可分为线性测试、模块化与类库、数据驱动测试和关键字驱动测试，
下面分别介绍这几种自动化测试模型的特点。

1．线性测试
通过录制或编写对应用程序的操作步骤会产生相应的线性脚本，每个线性脚本相对独
立，且不产生依赖与调用。这是早期自动化测试的一种形式，即单纯地模拟用户完整的操
作场景。第 4 章中的自动化测试例子就属于线性测试。

2．模块化与类库
线性测试的缺点是不易维护，因此早期的自动化测试专家开始思考用新的自动化测试
模型来代替线性测试。做法很简单，借鉴了编程语言中的模块化思想，把重复的操作单独
封装成公共模块。在测试用例执行过程中，当需要用到模块封装时对其进行调用，这样就
最大限度地消除了重复，从而提高测试用例的可维护性。

3．数据驱动测试
虽然模块化测试很好地解决了脚本的重复问题，但是，自动化测试脚本在开发过程中
还是发现了诸多不便。例如，在测试不同用户登录时，虽然登录的步骤是一样的，但是登
录用的数据是不同的。模块化测试并不能解决这类问题。于是，数据驱动测试的概念被提
出。
数据驱动测试的定义：数据的改变驱动自动化测试的执行，最终引起测试结果的改变。
简单理解就是把数据驱动所需要的测试数据参数化，我们可以用多种方式来存储和管理这 些参数化的数据。 

4．关键字驱动测试
关键字驱动测试又被称为表驱动测试或基于动作字测试。这类框架会把自动化操作封
装为“关键字”，避免测试人员直接接触代码，多以“填表格”的形式降低脚本的编写难
度。
"""


# 模块化与参数化
"""
模块化与参数化一般需要配合使用，即在创建函数或类方法时为它们设置入参，从而
使它们可以根据不同的参数执行相应的操作。
"""


# 读取数据文件
# 读取 txt 文件
"""
read()：读取整个文件。
readline()：读取一行数据。
readlines()：读取所有行的数据。
"""

# 读取 CSV 文件
"""
通过 codecs 提供的 open()方法在打开文件时可以指定编码类型
csv 模块 reader()方法读取文件避免中文乱码问题
itertools 提供了用于操作迭代对象的函数，即 islice()函数，
它可以返回一个迭代器，第一个参数指定迭代对象，第二个参数指定开始迭代的位
置，第三个参数表示结束位。
"""

# 读取 XML 文件
"""
1．获得标签对之间的数据
XML 模块提供 parse() 方法可读取 XML 文件;
documentElement() 方法用于获取文档元素对象;
getElementsByTagName() 方法用于获取文件中的标签

firstChild 属性可返回被选节点的第一个子节点，data 表示获取该节点的数据

2．获得标签的属性值
使用 getAttribute()方法获取元素的属性值
"""

# 读取 JSON 文件
"""
通过 open()方法即可读取 user_info.json 文件。
因为测试数据本身是以列表和字典格式存放的，所以读取整个文件内容后，通过 JSON 提供的表将 str 类型转换为 list 类型即可。
"""
